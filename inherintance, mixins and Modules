The < notation means we're creating a subclass of the thing on the right. 
The superclass method returns the parent of a particular class.
If you don't explicitly define a superclass ruby makes Object the superclass. and superclass of Object is BasicObject.

Modules are a way of grouping together methods classes and constants. Modules give you 2 major benefits.
1) Modules provide a namespace and prevent name clashes.
2) Modules support the mixin facility.

A module can't have instances cause a module is not a class but you can include a module within a class definition.

You can add Enumerables in your class by just saying include Enumerables.
If you want to add something in Modules u write require_relatives.

How instance variables work: The first mention of an @-prefixed variable creates the instance variable in the current object, SELF.
For the most part, mixin modules don't use instance variables directly- they use accessors to retrieve data from the client object.

IF a class has multiple modules mixed in, the last one included is searched first. When you're loooking for subclassing relationship while designing your appplication , be on the loockout for the IS-A relationship.

Method LookUp. Search it's self, search the superclass, and so on. If nothing is found it returns with a method called method_missing, which gets called as last resort.

It's in Kernel that most of Ruby's fundamental methods are defined. 
The rules of method lookup are. It looks for method in 
1) It's class
2) Modules mixed into its class, in reverse order of inclusion,
3) The class's superclass
4) Modules mixed into the superclass, in reverse order of inclusion.
5) Likewise, up to Object(and its mix-in kernel) and BasicObject.

A singleton method. is a method difined direcly on an object. It is a method that is defined only for one object. The singleto method lookup lies in a special class.

Including a Module more than once does not do anything. It's just as if you added nothing.

You can use the method search path with super. i.e You can use the super keyword to jump up to the highest definition.
Modules don't have instances. Entities or things are generally best modelled in classes, and charateristic or properties of entities or things are best encapsulated in modules.
A class can have only one superclass, but it can mix in as many modules as it wants.


╔═══════════════╦═══════════════════════════╦═════════════════════════════════╗
║               ║ class                     ║ module                          ║
╠═══════════════╬═══════════════════════════╬═════════════════════════════════╣
║ instantiation ║ can be instantiated       ║ can *not* be instantiated       ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ usage         ║ object creation           ║ mixin facility. provide         ║
║               ║                           ║   a namespace.                  ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ superclass    ║ module                    ║ object                          ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ consists of   ║ methods, constants,       ║ methods, constants,             ║
║               ║   and variables           ║   and classes                   ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ methods       ║ class methods,            ║ module methods,                 ║
║               ║   instance methods        ║   instance methods              ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ inheritance   ║ inherits behavior and can ║ No inheritance                  ║
║               ║   be base for inheritance ║                                 ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ inclusion     ║ cannot be included        ║ can be included in classes and  ║
║               ║                           ║   modules by using the include  ║
║               ║                           ║   command (includes all         ║
║               ║                           ║   instance methods as instance  ║
║               ║                           ║   methods in class/module)      ║
╟───────────────╫───────────────────────────╫─────────────────────────────────╢
║ extension     ║ can not extend with       ║ module can extend instance by   ║
║               ║   extend command          ║   using extend command (extends ║
║               ║   (only with inheritance) ║   given instance with singleton ║
║               ║                           ║   methods from module)          ║
╚═══════════════╩═══════════════════════════╩═════════════════════════════════╝